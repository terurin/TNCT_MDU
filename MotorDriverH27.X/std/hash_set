// hash_set standard header
#ifndef _HASH_SET_
#define _HASH_SET_
#include <xhash>
_STD_BEGIN
		// TEMPLATE CLASS _Hset_traits
template<class _Kty,	// key type (same as value type)
	class _Tr,	// comparator predicate type
	class _Alloc,	// actual allocator type (should be value allocator)
	bool _Mfl>	// true if multiple equivalent keys are permitted
	class _Hset_traits
		: public _Container_base
	{	// traits required to make _Hash behave like a set
public:
	typedef _Kty _Val_type;
	typedef _Kty key_type;
	typedef _Kty value_type;
	typedef _Tr key_compare;

	typedef typename _Alloc::template rebind<value_type>::other
		allocator_type;

	typedef typename allocator_type::const_pointer _ITptr;
	typedef typename allocator_type::const_reference _IReft;

	enum
		{	// make multi parameter visible as an enum constant
		_Multi = _Mfl};

	_Hset_traits()
		: comp()
		{	// construct with default comparator
		}

	_Hset_traits(const _Tr& _Traits)
		: comp(_Traits)
		{	// construct with specified comparator
		}

	typedef key_compare value_compare;

	static const _Kty& _Kfn(const value_type& _Val)
		{	// return entire value as key
		return (_Val);
		}

	_Tr comp;	// the comparator predicate for keys
	};

		// TEMPLATE CLASS hash_set
export
template<class _Kty,
	class _Tr = hash_compare<_Kty, less<_Kty> >,
	class _Alloc = allocator<_Kty> >
	class hash_set
		: public _Hash<_Hset_traits<_Kty, _Tr, _Alloc, false> >
	{	// hash table of key values, unique keys
public:
	typedef hash_set<_Kty, _Tr, _Alloc> _Myt;
	typedef _Hash<_Hset_traits<_Kty, _Tr, _Alloc, false> > _Mybase;
	typedef _Kty key_type;
	typedef _Tr key_compare;
	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	hash_set()
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults
		}

	hash_set(const _Myt& _Right)
		: _Mybase(_Right)
		{	// construct set by copying _Right
		}

	explicit hash_set(const key_compare& _Traits)
		: _Mybase(_Traits, allocator_type())
		{	// construct empty set from comparator
		}

	hash_set(const key_compare& _Traits, const allocator_type& _Al)
		: _Mybase(_Traits, _Al)
		{	// construct empty set from comparator and allocator
		}

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last);

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last,
			const key_compare& _Traits);

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last,
			const key_compare& _Traits, const allocator_type& _Al);

	_Myt& operator=(const _Myt& _Right)
		{	// assign by copying _Right
		_Mybase::operator=(_Right);
		return (*this);
		}

 #if _HAS_RVALUE_REFERENCES
	hash_set(_Myt&& _Right)
		: _Mybase(_STD move(_Right))
		{	// construct set by moving _Right
		}

	_Myt& operator=(_Myt&& _Right)
		{	// assign by moving _Right
		_Mybase::operator=(_STD move(_Right));
		return (*this);
		}

	void swap(_Myt& _Right)
		{	// exchange contents with non-movable _Right
		_Mybase::swap(_Right);
		}

	void swap(_Myt&& _Right)
		{	// exchange contents with movable _Right
		_Mybase::swap(_STD move(_Right));
		}
 #endif /* _HAS_RVALUE_REFERENCES */

 #if _HAS_INITIALIZER_LISTS
	hash_set(_XSTD initializer_list<value_type> _Ilist)
		: _Mybase(key_compare(), allocator_type())
		{	// construct from initializer_list, defaults
		this->insert(_Ilist.begin(), _Ilist.end());
		}

	hash_set(_XSTD initializer_list<value_type> _Ilist,
			const key_compare& _Pred)
		: _Mybase(_Pred, allocator_type())
		{	// construct from initializer_list, comparator
		this->insert(_Ilist.begin(), _Ilist.end());
		}

	hash_set(_XSTD initializer_list<value_type> _Ilist,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	// construct from initializer_list, comparator, and allocator
		this->insert(_Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
		{	// assign initializer_list
		this->insert(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

//	void insert(_XSTD initializer_list<value_type> _Ilist)
//		{	// insert initializer_list
//		this->insert(_Ilist.begin(), _Ilist.end());
//		}
 #endif /* _HAS_INITIALIZER_LISTS */
	};

template<class _Kty,
	class _Tr,
	class _Alloc> inline
	void swap(hash_set<_Kty, _Tr, _Alloc>& _Left,
		hash_set<_Kty, _Tr, _Alloc>& _Right)
	{	// swap _Left and _Right hash_sets
	_Left.swap(_Right);
	}

 #if _HAS_RVALUE_REFERENCES
template<class _Kty,
	class _Tr,
	class _Alloc> inline
	void swap(hash_set<_Kty, _Tr, _Alloc>& _Left,
		hash_set<_Kty, _Tr, _Alloc>&& _Right)
	{	// swap _Left and _Right hash_sets
	typedef hash_set<_Kty, _Tr, _Alloc> _Myt;
	_Left.swap(_STD forward<_Myt>(_Right));
	}

template<class _Kty,
	class _Tr,
	class _Alloc> inline
	void swap(hash_set<_Kty, _Tr, _Alloc>&& _Left,
		hash_set<_Kty, _Tr, _Alloc>& _Right)
	{	// swap _Left and _Right hash_sets
	typedef hash_set<_Kty, _Tr, _Alloc> _Myt;
	_Right.swap(_STD forward<_Myt>(_Left));
	}
 #endif /* _HAS_RVALUE_REFERENCES */

 #if _HAS_STLPORT_EMULATION
		// TEMPLATE CLASS hash_set, PARTIAL SPECIALIZATION (for STLport)
export
template<class _Kty,
	class _Keyeq>
	class hash_set<_Kty, hash<_Kty>, _Keyeq>
		: public _Hash<_Hset_traits<_Kty,
			_Hash_compare<_Kty, hash<_Kty>, _Keyeq>, allocator<_Kty>, false> >
	{	// hash table of key values, unique keys
public:
	typedef hash_set<_Kty, hash<_Kty>, _Keyeq> _Myt;
	typedef _Hash_compare<_Kty, hash<_Kty>, _Keyeq> _Mytraits;
	typedef _Hash<_Hset_traits<_Kty,
		_Mytraits, allocator<_Kty>, false> > _Mybase;
	typedef hash<_Kty> hasher;
	typedef _Kty key_type;
	typedef _Keyeq key_equal;
	typedef _Mytraits key_compare;

	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	hash_set()
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults
		}

	explicit hash_set(size_type)
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults, ignore initial size
		}

	hash_set(size_type, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	// construct empty set from hasher
		}

	hash_set(size_type, const hasher& _Hasharg, const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	// construct empty set from hasher and equality comparator
		}

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last);

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last,
			size_type);

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last,
			size_type, const hasher& _Hasharg);

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last,
			size_type, const hasher& _Hasharg, const _Keyeq& _Keyeqarg);

	hasher hash_function() const
		{	// return hasher object
		return (this->comp._Hashobj);
		}

	key_equal key_eq() const
		{	// return equality comparator object
		return (this->comp._Keyeqobj);
		}

	void resize(size_type)
		{	// accept but ignore resize hint
		}
	};
_STD_END

 #ifndef _NAMESPACE_STLPORT
  #define _NAMESPACE_STLPORT	stlport
 #endif /* _NAMESPACE_STLPORT */

namespace _NAMESPACE_STLPORT {
		// TEMPLATE CLASS hash_set, REPLACEMENT (for STLport)
template<class _Kty,
	class _Hasher = _STD hash<_Kty>,
	class _Keyeq = _STD equal_to<_Kty>,
	class _Alloc = _STD allocator<_Kty> >
	class hash_set
		: public _STD _Hash<_STD _Hset_traits<_Kty,
			_STD _Hash_compare<_Kty, _Hasher, _Keyeq>, _Alloc, false> >
	{	// hash table of key values, unique keys
public:
	typedef hash_set<_Kty, _Hasher, _Keyeq, _Alloc> _Myt;
	typedef _STD _Hash_compare<_Kty, _Hasher, _Keyeq> _Mytraits;
	typedef _STD _Hash<_STD _Hset_traits<_Kty,
		_Mytraits, _Alloc, false> > _Mybase;
	typedef _Hasher hasher;
	typedef _Kty key_type;
	typedef _Keyeq key_equal;
	typedef _Mytraits key_compare;

	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	hash_set()
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults
		}

	explicit hash_set(size_type)
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults, ignore initial size
		}

	hash_set(size_type, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	// construct empty set from hasher
		}

	hash_set(size_type, const hasher& _Hasharg, const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	// construct empty set from hasher and equality comparator
		}

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last)
		: _Mybase(key_compare(), allocator_type())
		{	// construct set from sequence, defaults
		for (; _First != _Last; ++_First)
			this->insert(*_First);
		}

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last, size_type)
		: _Mybase(key_compare(), allocator_type())
		{	// construct set from sequence, ignore initial size
		for (; _First != _Last; ++_First)
			this->insert(*_First);
		}

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last, size_type,
			const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	// construct set from sequence, comparator
		for (; _First != _Last; ++_First)
			this->insert(*_First);
		}

	template<class _Iter>
		hash_set(_Iter _First, _Iter _Last, size_type,
			const hasher& _Hasharg, const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	// construct set from sequence, comparator, and allocator
		for (; _First != _Last; ++_First)
			this->insert(*_First);
		}

	hasher hash_function() const
		{	// return hasher object
		return (this->comp._Hashobj);
		}

	key_equal key_eq() const
		{	// return equality comparator object
		return (this->comp._Keyeqobj);
		}

	void resize(size_type)
		{	// accept but ignore resize hint
		}
	};
}	// namespace _NAMESPACE_STLPORT
_STD_BEGIN
 #endif /* _HAS_STLPORT_EMULATION */

		// TEMPLATE CLASS hash_multiset
export
template<class _Kty,
	class _Tr = hash_compare<_Kty, less<_Kty> >,
	class _Alloc = allocator<_Kty> >
	class hash_multiset
		: public _Hash<_Hset_traits<_Kty, _Tr, _Alloc, true> >
	{	// hash table of key values, non-unique keys
public:
	typedef hash_multiset<_Kty, _Tr, _Alloc> _Myt;
	typedef _Hash<_Hset_traits<_Kty, _Tr, _Alloc, true> > _Mybase;
	typedef _Kty key_type;
	typedef _Tr key_compare;
	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	hash_multiset()
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults
		}

	hash_multiset(const _Myt& _Right)
		: _Mybase(_Right)
		{	// construct set by copying _Right
		}

	explicit hash_multiset(const key_compare& _Traits)
		: _Mybase(_Traits, allocator_type())
		{	// construct empty set from comparator
		}

	hash_multiset(const key_compare& _Traits,
		const allocator_type& _Al)
		: _Mybase(_Traits, _Al)
		{	// construct empty set from comparator and allocator
		}

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last);

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last,
			const key_compare& _Traits);

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last,
			const key_compare& _Traits, const allocator_type& _Al);

	_Myt& operator=(const _Myt& _Right)
		{	// assign by copying _Right
		_Mybase::operator=(_Right);
		return (*this);
		}

 #if _HAS_RVALUE_REFERENCES
	hash_multiset(_Myt&& _Right)
		: _Mybase(_STD move(_Right))
		{	// construct set by moving _Right
		}

	_Myt& operator=(_Myt&& _Right)
		{	// assign by moving _Right
		_Mybase::operator=(_STD move(_Right));
		return (*this);
		}

	template<class _Valty>
		iterator insert(_Valty&& _Val)
		{	// insert a {key, mapped} value
		return (_Mybase::insert(_STD forward<_Valty>(_Val)).first);
		}

	template<class _Valty>
		typename _STD tr1::enable_if<!_STD tr1::is_same<const_iterator,
			typename _STD tr1::remove_reference<_Valty>::type>::value,
				iterator>::type
		insert(const_iterator _Where, _Valty&& _Val)
		{	// insert a {key, mapped} value, with hint
		return (_Mybase::insert(_Where, _STD forward<_Valty>(_Val)));
		}

	void swap(_Myt& _Right)
		{	// exchange contents with non-movable _Right
		_Mybase::swap(_Right);
		}

	void swap(_Myt&& _Right)
		{	// exchange contents with movable _Right
		_Mybase::swap(_STD move(_Right));
		}
 #endif /* _HAS_RVALUE_REFERENCES */

 #if _HAS_INITIALIZER_LISTS
	hash_multiset(_XSTD initializer_list<value_type> _Ilist)
		: _Mybase(key_compare(), allocator_type())
		{	// construct from initializer_list, defaults
		this->insert(_Ilist.begin(), _Ilist.end());
		}

	hash_multiset(_XSTD initializer_list<value_type> _Ilist,
			const key_compare& _Pred)
		: _Mybase(_Pred, allocator_type())
		{	// construct from initializer_list, comparator
		this->insert(_Ilist.begin(), _Ilist.end());
		}

	hash_multiset(_XSTD initializer_list<value_type> _Ilist,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	// construct from initializer_list, comparator, and allocator
		this->insert(_Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
		{	// assign initializer_list
		this->insert(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

	void insert(_XSTD initializer_list<value_type> _Ilist)
		{	// insert initializer_list
		this->insert(_Ilist.begin(), _Ilist.end());
		}
 #endif /* _HAS_INITIALIZER_LISTS */

	iterator insert(const value_type& _Val)
		{	// insert a key value
		return (_Mybase::insert(_Val).first);
		}

	iterator insert(const_iterator _Where, const value_type& _Val)
		{	// insert a key value, with hint
		return (_Mybase::insert(_Where, _Val));
		}

	template<class _Iter>
		void insert(_Iter _First, _Iter _Last);
	};

template<class _Kty,
	class _Tr,
	class _Alloc> inline
	void swap(hash_multiset<_Kty, _Tr, _Alloc>& _Left,
		hash_multiset<_Kty, _Tr, _Alloc>& _Right)
	{	// swap _Left and _Right hash_multisets
	_Left.swap(_Right);
	}

 #if _HAS_RVALUE_REFERENCES
template<class _Kty,
	class _Tr,
	class _Alloc> inline
	void swap(hash_multiset<_Kty, _Tr, _Alloc>& _Left,
		hash_multiset<_Kty, _Tr, _Alloc>&& _Right)
	{	// swap _Left and _Right hash_multisets
	typedef hash_multiset<_Kty, _Tr, _Alloc> _Myt;
	_Left.swap(_STD forward<_Myt>(_Right));
	}

template<class _Kty,
	class _Tr,
	class _Alloc> inline
	void swap(hash_multiset<_Kty, _Tr, _Alloc>&& _Left,
		hash_multiset<_Kty, _Tr, _Alloc>& _Right)
	{	// swap _Left and _Right hash_multisets
	typedef hash_multiset<_Kty, _Tr, _Alloc> _Myt;
	_Right.swap(_STD forward<_Myt>(_Left));
	}
 #endif /* _HAS_RVALUE_REFERENCES */

 #if _HAS_STLPORT_EMULATION
		// TEMPLATE CLASS hash_multiset, PARTIAL SPECIALIZATION (for STLport)
export
template<class _Kty,
	class _Keyeq>
	class hash_multiset<_Kty, hash<_Kty>, _Keyeq>
		: public _Hash<_Hset_traits<_Kty,
			_Hash_compare<_Kty, hash<_Kty>, _Keyeq>, allocator<_Kty>, true> >
	{	// hash table of key values, non-unique keys
public:
	typedef hash_multiset<_Kty, hash<_Kty>, _Keyeq> _Myt;
	typedef _Hash_compare<_Kty, hash<_Kty>, _Keyeq> _Mytraits;
	typedef _Hash<_Hset_traits<_Kty,
		_Mytraits, allocator<_Kty>, true> > _Mybase;
	typedef hash<_Kty> hasher;
	typedef _Kty key_type;
	typedef _Keyeq key_equal;
	typedef _Mytraits key_compare;

	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	hash_multiset()
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults
		}

	explicit hash_multiset(size_type)
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults, ignore initial size
		}

	hash_multiset(size_type, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	// construct empty set from hasher
		}

	hash_multiset(size_type, const hasher& _Hasharg, const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	// construct empty set from hasher and equality comparator
		}

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last);

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last,
			size_type);

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last,
			size_type, const hasher& _Hasharg);

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last,
			size_type, const hasher& _Hasharg, const _Keyeq& _Keyeqarg);

	hasher hash_function() const
		{	// return hasher object
		return (this->comp._Hashobj);
		}

	key_equal key_eq() const
		{	// return equality comparator object
		return (this->comp._Keyeqobj);
		}

	void resize(size_type)
		{	// accept but ignore resize hint
		}

	iterator insert(const value_type& _Val)
		{	// insert a key value
		return (_Mybase::insert(_Val).first);
		}

	iterator insert(const_iterator _Where, const value_type& _Val)
		{	// insert a key value, with hint
		return (_Mybase::insert(_Where, _Val));
		}

	template<class _Iter>
		void insert(_Iter _First, _Iter _Last);
	};
_STD_END
namespace _NAMESPACE_STLPORT {
		// TEMPLATE CLASS hash_multiset, REPLACEMENT (for STLport)
template<class _Kty,
	class _Hasher = _STD hash<_Kty>,
	class _Keyeq = _STD equal_to<_Kty>,
	class _Alloc = _STD allocator<_Kty> >
	class hash_multiset
		: public _STD _Hash<_STD _Hset_traits<_Kty,
			_STD _Hash_compare<_Kty, _Hasher, _Keyeq>, _Alloc, true> >
	{	// hash table of key values, non-unique keys
public:
	typedef hash_multiset<_Kty, _Hasher, _Keyeq, _Alloc> _Myt;
	typedef _STD _Hash_compare<_Kty, _Hasher, _Keyeq> _Mytraits;
	typedef _STD _Hash<_STD _Hset_traits<_Kty,
		_Mytraits, _Alloc, true> > _Mybase;
	typedef _Hasher hasher;
	typedef _Kty key_type;
	typedef _Keyeq key_equal;
	typedef _Mytraits key_compare;

	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	hash_multiset()
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults
		}

	explicit hash_multiset(size_type)
		: _Mybase(key_compare(), allocator_type())
		{	// construct empty set from defaults, ignore initial size
		}

	hash_multiset(size_type, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	// construct empty set from hasher
		}

	hash_multiset(size_type, const hasher& _Hasharg, const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	// construct empty set from hasher and equality comparator
		}

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last)
		: _Mybase(key_compare(), allocator_type())
		{	// construct set from sequence, defaults
		for (; _First != _Last; ++_First)
			this->insert(*_First);
		}

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last, size_type)
		: _Mybase(key_compare(), allocator_type())
		{	// construct set from sequence, defaults, ignore initial size
		for (; _First != _Last; ++_First)
			this->insert(*_First);
		}

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last, size_type,
			const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	// construct set from sequence, comparator
		for (; _First != _Last; ++_First)
			this->insert(*_First);
		}

	template<class _Iter>
		hash_multiset(_Iter _First, _Iter _Last, size_type,
			const hasher& _Hasharg, const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	// construct set from sequence, comparator, and allocator
		for (; _First != _Last; ++_First)
			this->insert(*_First);
		}

	hasher hash_function() const
		{	// return hasher object
		return (this->comp._Hashobj);
		}

	key_equal key_eq() const
		{	// return equality comparator object
		return (this->comp._Keyeqobj);
		}

	void resize(size_type)
		{	// accept but ignore resize hint
		}

	iterator insert(const value_type& _Val)
		{	// insert a key value
		return (_Mybase::insert(_Val).first);
		}

	iterator insert(const_iterator _Where, const value_type& _Val)
		{	// insert a key value, with hint
		return (_Mybase::insert(_Where, _Val));
		}

	template<class _Iter>
		void insert(_Iter _First, _Iter _Last)
		{	// insert [_First, _Last), arbitrary iterators
		for (; _First != _Last; ++_First)
			insert(*_First);
		}
	};
}	// namespace _NAMESPACE_STLPORT
_STD_BEGIN
 #endif /* _HAS_STLPORT_EMULATION */
_STD_END

namespace stdext {
	using _STD hash_set;
	using _STD hash_multiset;
	}
#endif /* _HASH_SET_ */

/*
 * Copyright (c) 1992-2010 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
V5.30:0009 */
